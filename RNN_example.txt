import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, Dense
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt
import scikitplot as skplt

# Parameters
vocab_size = 10000
embedding_dim = 64
max_length = 100
trunc_type = 'post'
padding_type = 'post'
oov_tok = "<OOV>"

# Tokenize the text
tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)
tokenizer.fit_on_texts(X_train)
word_index = tokenizer.word_index

# Convert text to sequences and pad them
sequences_train = tokenizer.texts_to_sequences(X_train)
sequences_test = tokenizer.texts_to_sequences(X_test)

padded_train = pad_sequences(sequences_train, maxlen=max_length, padding=padding_type, truncating=trunc_type)
padded_test = pad_sequences(sequences_test, maxlen=max_length, padding=padding_type, truncating=trunc_type)

# Build the RNN model
model = Sequential([
    Embedding(vocab_size, embedding_dim, input_length=max_length),
    SimpleRNN(128, return_sequences=True),
    SimpleRNN(128),
    Dense(3, activation='softmax')  # Assuming 3 classes: negative, positive, neutral
])

# Compile the model
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Early stopping to prevent overfitting
early_stop = EarlyStopping(monitor='val_loss', patience=2)

# Train the model
model.fit(padded_train, y_train, epochs=10, validation_data=(padded_test, y_test), callbacks=[early_stop])

# Evaluate the model
y_pred = model.predict(padded_test)
y_pred_classes = tf.argmax(y_pred, axis=1).numpy()

print(classification_report(y_test, y_pred_classes, target_names=['negative', 'positive', 'neutral']))
print("Accuracy Score:", accuracy_score(y_test, y_pred_classes))

# Plot confusion matrix
skplt.metrics.plot_confusion_matrix(y_test, y_pred_classes, normalize=True)
plt.show()
